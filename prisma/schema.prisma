// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 Int                @id @default(autoincrement())
    email              String             @unique
    firstName          String?
    lastName           String?
    gender             Boolean            @default(true)
    isVerified         Boolean            @default(false)
    session            Session[]
    password           Password?
    myProjects         Project[]          @relation(name: "Creator of a project")
    projects           UserProjects[]
    requestsToProjects RequestToProject[]
    verification       Verification?
}

model Verification {
    userId                Int     @unique
    user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    emailVerificationCode String?
    forgotPasswordCode    String?
}

model Password {
    userId   Int    @unique
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    password String
}

model Session {
    id           Int      @id @default(autoincrement())
    userId       Int
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    refreshToken String   @unique
    fingerprint  String   @unique
    ip           String
    userAgent    String
    expiresAt    DateTime
}

model Project {
    id                Int                @id @default(autoincrement())
    userId            Int
    creator           User               @relation(name: "Creator of a project", fields: [userId], references: [id])
    name              String
    description       String
    budget            Int
    status            String
    startsAt          DateTime
    participants      UserProjects[]
    requestsToProject RequestToProject[]
    conversation      Conversation[]
}

model RequestToProject {
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    projectId Int
    project   Project  @relation(fields: [projectId], references: [id])
    createdAt DateTime @default(now())

    @@id([userId, projectId])
}

model UserProjects {
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    projectId Int
    project   Project  @relation(fields: [projectId], references: [id])
    createdAt DateTime @default(now())

    @@id([userId, projectId])
}

model Message {
    id             Int          @id @default(autoincrement())
    conversationId Int
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId         Int
    text           String
    createdAt      DateTime     @default(now())
}

model Conversation {
    id                  Int                  @id @default(autoincrement())
    projectId           Int
    project             Project              @relation(fields: [projectId], references: [id])
    messages            Message[]
    usersOnConversation UserOnConversation[]
}

model UserOnConversation {
    conversationId Int
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    userId         Int

    @@id([conversationId, userId])
}
