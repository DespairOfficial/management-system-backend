// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                     @id @default(dbgenerated("uuid7()")) @db.Uuid
  email               String                     @unique
  name                String
  username            String
  gender              Boolean                    @default(true)
  isVerified          Boolean                    @default(false)
  image               String?
  country             String?
  phoneNumber         String?
  company             String?
  role                String?
  about               String?
  address             String?
  lastActivity        DateTime?
  status              OnlineStatus               @default(offline)
  session             Session[]
  password            Password?
  myProjects          Project[]                  @relation(name: "Creator of a project")
  projects            UserOnProject[]
  requestsToProjects  RequestToProject[]
  verification        Verification?
  conversations       UserOnConversation[]
  unseenConversations UserOnUnseenConversation[]

  contacts        Contacts[] @relation(name: "contacts")
  whereInContacts Contacts[] @relation(name: "incontacts")
  Message         Message[]
}

model Verification {
  userId                String  @unique @db.Uuid
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  emailVerificationCode String?
  forgotPasswordCode    String?
}

model Password {
  userId   String @unique @db.Uuid
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  password String
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       String @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  refreshToken String   @unique
  fingerprint  String   @unique
  ip           String
  userAgent    String
  expiresAt    DateTime
}

model Project {
  id                Int                @id @default(autoincrement())
  userId            String @db.Uuid
  creator           User               @relation(name: "Creator of a project", fields: [userId], references: [id])
  name              String
  description       String
  budget            Int
  status            String
  startsAt          DateTime
  participants      UserOnProject[]
  requestsToProject RequestToProject[]
  conversation      Conversation[]
}

model RequestToProject {
  userId    String @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())

  @@id([userId, projectId])
}

model UserOnProject {
  userId    String @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())

  @@id([userId, projectId])
}

model Message {
  id             Int                @id @default(autoincrement())
  conversationId Int
  conversation   Conversation       @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId       String @db.Uuid
  sender         User               @relation(fields: [senderId], references: [id])
  body           String
  attachments    Attachment[]
  contentType    MessageContentType @default(text)
  createdAt      DateTime           @default(now())
}

model Attachment {
  id        Int      @id @default(autoincrement())
  messageId Int
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String
  size      Int
  type      String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Conversation {
  id                       Int                        @id @default(autoincrement())
  projectId                Int
  project                  Project                    @relation(fields: [projectId], references: [id])
  messages                 Message[]
  participants             UserOnConversation[]
  type                     ConversationType           @default(GROUP)
  userOnUnseenConversation UserOnUnseenConversation[]
}

model UserOnConversation {
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String @db.Uuid
  user           User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
}

model UserOnUnseenConversation {
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String @db.Uuid
  user           User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
}

model Contacts {
  userId    String @db.Uuid
  user      User   @relation(name: "contacts", fields: [userId], references: [id])
  contactId String @db.Uuid
  contact   User   @relation(name: "incontacts", fields: [contactId], references: [id])

  @@id([userId, contactId])
}

enum ConversationType {
  ONE_TO_ONE
  GROUP
}

enum OnlineStatus {
  online
  offline
  away
  busy
}

enum MessageContentType {
  image
  text
}
