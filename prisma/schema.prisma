// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                     @id @default(dbgenerated("uuid7()")) @db.Uuid
  email               String                     @unique
  name                String
  username            String
  gender              Boolean                    @default(true)
  isVerified          Boolean                    @default(false)
  isPublic            Boolean                    @default(true)
  imantry             String?
  phoge               String?
  coune               String?
  company             String?
  role                String?
  about               String?
  address             String?
  lastActivity        DateTime?
  status              OnlineStatus               @default(offline)
  session             Session[]
  password            Password?
  myProjects          Project[]                  @relation(name: "Creator of a project")
  projects            UserOnProject[]
  requestsToProjects  RequestToProject[]
  verification        Verification?
  conversations       UserOnConversation[]
  unseenConversations UserOnUnseenConversation[]

  contacts         Contacts[]         @relation(name: "contacts")
  whereInContacts  Contacts[]         @relation(name: "incontacts")
  messages         Message[]
  fileContributors FileContributors[]
  sharedFiles      SharedFile[]
  calendarEvent    CalendarEvent[]
  assigneeOnCard   AssigneeOnCard[]
}

model Verification {
  userId                String  @unique @db.Uuid
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  emailVerificationCode String?
  forgotPasswordCode    String?
}

model Password {
  userId   String @unique @db.Uuid
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  password String
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  refreshToken String   @unique
  fingerprint  String   @unique
  ip           String
  userAgent    String
  expiresAt    DateTime
}

model Project {
  id                String             @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId            String             @db.Uuid
  creator           User               @relation(name: "Creator of a project", fields: [userId], references: [id])
  name              String
  description       String
  image             String
  budget            Int
  status            String
  startsAt          DateTime
  participants      UserOnProject[]
  requestsToProject RequestToProject[]
  conversation      Conversation[]
  kanbanBoard       KanbanBoard[]
}

model RequestToProject {
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String   @db.Uuid
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, projectId])
}

model UserOnProject {
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String   @db.Uuid
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, projectId])
}

model Message {
  id             Int                @id @default(autoincrement())
  conversationId Int
  conversation   Conversation       @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId       String             @db.Uuid
  sender         User               @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  body           String
  attachments    Attachment[]
  contentType    MessageContentType @default(text)
  createdAt      DateTime           @default(now())
}

model Attachment {
  id        Int      @id @default(autoincrement())
  messageId Int
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  name      String
  size      Int
  type      String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Conversation {
  id                       Int                        @id @default(autoincrement())
  projectId                String                     @db.Uuid
  project                  Project                    @relation(fields: [projectId], references: [id])
  messages                 Message[]
  participants             UserOnConversation[]
  type                     ConversationType           @default(GROUP)
  userOnUnseenConversation UserOnUnseenConversation[]
}

model UserOnConversation {
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String       @db.Uuid
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([conversationId, userId])
}

model UserOnUnseenConversation {
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String       @db.Uuid
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([conversationId, userId])
}

model Contacts {
  userId    String @db.Uuid
  user      User   @relation(name: "contacts", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contactId String @db.Uuid
  contact   User   @relation(name: "incontacts", fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, contactId])
}

model SharedFile {
  id     String @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  name         String
  size         Int
  type         String
  url          String
  dateCreated  DateTime
  dateModified DateTime
  contributors FileContributors[]
  tags         TagsOnFile[]
}

model Tag {
  name  String       @id
  files TagsOnFile[]
}

model TagsOnFile {
  fileId  String     @db.Uuid
  file    SharedFile @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagName String
  tag     Tag        @relation(fields: [tagName], references: [name], onDelete: Cascade, onUpdate: Cascade)

  @@id([fileId, tagName])
}

model FileContributors {
  fileId     String               @db.Uuid
  file       SharedFile           @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String               @db.Uuid
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission SharedFilePermission @default(view)

  @@id([fileId, userId])
}

model CalendarEvent {
  id          String   @id @default(dbgenerated("uuid7()")) @db.Uuid
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  color       String
  description String
  start       DateTime
  end         DateTime
  title       String
  allDay      Boolean
}

model KanbanBoard {
  id        String  @id @default(dbgenerated("uuid7()")) @db.Uuid
  projectId String  @db.Uuid
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  cards       KanbanCard[]
  columns     KanbanColumn[]
  columnOrder String[]
}

model KanbanCard {
  id          String               @id @db.Uuid
  name        String
  description String?
  due         DateTime[]
  attachments String[]
  comments    KanbanComment[]
  completed   Boolean
  boardId     String               @db.Uuid
  board       KanbanBoard          @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  column      KanbanCardOnColumn[]
  assignees   AssigneeOnCard[]
}

model AssigneeOnCard {
  assigneeId String     @db.Uuid
  assignees  User       @relation(fields: [assigneeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cardId     String     @db.Uuid
  card       KanbanCard @relation(fields: [cardId], references: [id])

  @@id([cardId, assigneeId])
}

model KanbanComment {
  id          String             @id @default(dbgenerated("uuid7()")) @db.Uuid
  image       String
  name        String
  createdAt   DateTime
  messageType MessageContentType
  message     String
  cardId      String             @db.Uuid
  card        KanbanCard         @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model KanbanColumn {
  id      String               @id @default(dbgenerated("uuid7()")) @db.Uuid
  name    String
  boardId String               @db.Uuid
  board   KanbanBoard          @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cards   KanbanCardOnColumn[]
}

model KanbanCardOnColumn {
  cardId String     @db.Uuid
  card   KanbanCard @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  columnId String       @db.Uuid
  column   KanbanColumn @relation(fields: [columnId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([cardId, columnId])
}

enum ConversationType {
  ONE_TO_ONE
  GROUP
}

enum OnlineStatus {
  online
  offline
  away
  busy
}

enum MessageContentType {
  image
  text
}

enum SharedFilePermission {
  view
  edit
}
